{"ast":null,"code":"var _jsxFileName = \"D:\\\\React\\\\my-app\\\\src\\\\state\\\\Toggle.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\n\n// State là các thông tin lưu trong một component\n// Hook là một tính năng mới trong react cho phép chúng ta sử dụng state và các tính năng khác của react mà không cần phải sử dụng class\n// Stateless functional component: là component nhưng không sử dụng state\n// function Toggle() {\n//   return <div className=\"toggle\"></div>;\n// }\n// Statefull function component: là component có sử dụng state\n// function Toggle1() {\n// const [count, setCount] = useState();\n//   return <div className=\"toggle\"></div>;\n// }\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet i = 0;\nfunction Toggle() {\n  _s();\n  // useState nhận vào 1 mảng gồm có 2 tham số: Giá trị khởi tạo và hàm cập nhật giá trị khởi tạo đó\n  // VD: const [on, setOn] = useState(false); => false là giá trị khởi tạo được gán cho on\n  // Để sử dụng useState, ta cần thực hiện 4 bước\n  // Enabling state: useState(initialize value)\n  // Initialize value: useState(boolean(true, flase), number(1,2,3,...), string(\"Tanas\"), undefined, null,[1,2,3,4,5],\n  // {title: Frontend Developer})\n  // Reading state:\n  // Update state:\n\n  const array = useState(false);\n  console.log(array); // [false, function]\n  console.log(array[0]);\n  console.log(array[1]);\n  const [a, b] = [0, 1];\n  console.log(a, b);\n  const [on, setOn] = useState(0);\n  const [count, setCount] = useState(0);\n  //   console.log(on, setOn)\n  // re-render khi useState() thay đổi (state changes), tức là hàm set giá trị trong useState() được gán giá trị mới thì toàn bộ component sẽ load lại\n  console.log(on);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"toggle\",\n      onClick: () => setOn(true),\n      children: [\"Toggle \", on ? \"On\" : \"Off\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: () => setCount(++i),\n      children: [\"Count Click: \", count]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n_s(Toggle, \"dWNcM3Ehs0ev+FEImo+w94E7nbk=\");\n_c = Toggle;\nexport default Toggle;\nvar _c;\n$RefreshReg$(_c, \"Toggle\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","i","Toggle","_s","array","console","log","a","b","on","setOn","count","setCount","children","className","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/React/my-app/src/state/Toggle.js"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\n// State là các thông tin lưu trong một component\r\n// Hook là một tính năng mới trong react cho phép chúng ta sử dụng state và các tính năng khác của react mà không cần phải sử dụng class\r\n// Stateless functional component: là component nhưng không sử dụng state\r\n// function Toggle() {\r\n//   return <div className=\"toggle\"></div>;\r\n// }\r\n// Statefull function component: là component có sử dụng state\r\n// function Toggle1() {\r\n// const [count, setCount] = useState();\r\n//   return <div className=\"toggle\"></div>;\r\n// }\r\nlet i = 0;\r\nfunction Toggle() {\r\n  // useState nhận vào 1 mảng gồm có 2 tham số: Giá trị khởi tạo và hàm cập nhật giá trị khởi tạo đó\r\n  // VD: const [on, setOn] = useState(false); => false là giá trị khởi tạo được gán cho on\r\n  // Để sử dụng useState, ta cần thực hiện 4 bước\r\n  // Enabling state: useState(initialize value)\r\n  // Initialize value: useState(boolean(true, flase), number(1,2,3,...), string(\"Tanas\"), undefined, null,[1,2,3,4,5],\r\n  // {title: Frontend Developer})\r\n  // Reading state:\r\n  // Update state:\r\n\r\n  const array = useState(false);\r\n  console.log(array); // [false, function]\r\n  console.log(array[0]);\r\n  console.log(array[1]);\r\n  const [a, b] = [0, 1];\r\n  console.log(a, b);\r\n\r\n  const [on, setOn] = useState(0);\r\n  const [count, setCount] = useState(0);\r\n  //   console.log(on, setOn)\r\n  // re-render khi useState() thay đổi (state changes), tức là hàm set giá trị trong useState() được gán giá trị mới thì toàn bộ component sẽ load lại\r\n  console.log(on);\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"toggle\" onClick={() => setOn(true)}>\r\n        Toggle {on ? \"On\" : \"Off\"}\r\n      </div>\r\n      <div onClick={() => setCount(++i)}>Count Click: {count}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Toggle;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;;AAEvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,IAAIC,CAAC,GAAG,CAAC;AACT,SAASC,MAAMA,CAAA,EAAG;EAAAC,EAAA;EAChB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,MAAMC,KAAK,GAAGN,QAAQ,CAAC,KAAK,CAAC;EAC7BO,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC,CAAC,CAAC;EACpBC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC,CAAC,CAAC,CAAC;EACrBC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC,CAAC,CAAC,CAAC;EACrB,MAAM,CAACG,CAAC,EAAEC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;EACrBH,OAAO,CAACC,GAAG,CAACC,CAAC,EAAEC,CAAC,CAAC;EAEjB,MAAM,CAACC,EAAE,EAAEC,KAAK,CAAC,GAAGZ,QAAQ,CAAC,CAAC,CAAC;EAC/B,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,CAAC,CAAC;EACrC;EACA;EACAO,OAAO,CAACC,GAAG,CAACG,EAAE,CAAC;EAEf,oBACET,OAAA;IAAAa,QAAA,gBACEb,OAAA;MAAKc,SAAS,EAAC,QAAQ;MAACC,OAAO,EAAEA,CAAA,KAAML,KAAK,CAAC,IAAI,CAAE;MAAAG,QAAA,GAAC,SAC3C,EAACJ,EAAE,GAAG,IAAI,GAAG,KAAK;IAAA;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtB,CAAC,eACNnB,OAAA;MAAKe,OAAO,EAAEA,CAAA,KAAMH,QAAQ,CAAC,EAAEX,CAAC,CAAE;MAAAY,QAAA,GAAC,eAAa,EAACF,KAAK;IAAA;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC1D,CAAC;AAEV;AAAChB,EAAA,CA/BQD,MAAM;AAAAkB,EAAA,GAANlB,MAAM;AAiCf,eAAeA,MAAM;AAAC,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}