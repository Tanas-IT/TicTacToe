{"ast":null,"code":"var _jsxFileName = \"D:\\\\React\\\\my-app\\\\src\\\\toggle\\\\Toggle.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./ToggleStyles.css\";\n\n// State là các thông tin lưu trong một component\n// Hook là một tính năng mới trong react cho phép chúng ta sử dụng state và các tính năng khác của react mà không cần phải sử dụng class\n// Stateless functional component: là component nhưng không sử dụng state\n// function Toggle() {\n//   return <div className=\"toggle\"></div>;\n// }\n// Statefull function component: là component có sử dụng state\n// function Toggle1() {\n// const [count, setCount] = useState();\n//   return <div className=\"toggle\"></div>;\n// }\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Toggle() {\n  _s();\n  // useState nhận vào 1 mảng gồm có 2 tham số: Giá trị khởi tạo và hàm cập nhật giá trị khởi tạo đó\n  // VD: const [on, setOn] = useState(false); => false là giá trị khởi tạo được gán cho on\n  // Để sử dụng useState, ta cần thực hiện 4 bước\n  // Enabling state: useState(initialize value)\n  // Initialize value: useState(boolean(true, flase), number(1,2,3,...), string(\"Tanas\"), undefined, null,[1,2,3,4,5],\n  // {title: Frontend Developer})\n  // Reading state:\n  // Update state:\n\n  const array = useState(false);\n  console.log(array); // [false, function]\n  console.log(array[0]);\n  console.log(array[1]);\n  const [a, b] = [0, 1];\n  console.log(a, b);\n  const [on, setOn] = useState(false);\n  //  console.log(on, setOn)\n  // re-render khi useState() thay đổi (state changes), tức là hàm set giá trị trong useState() được gán giá trị mới thì toàn bộ component sẽ load lại\n  // Dùng hàm setState thì phải đặt trong hàm khác và để hàm khác return về setState(value). Nếu dùng setState(value) mà không đặt trong return của\n  // hàm khác thì sẽ bị infinitive loop vì web sẽ re-render liên tục không dừng.\n  // Khi muốn thay đổi state mà state này phụ thuộc vào giá trị trước đó của nó thì ta cần truyền vào một callback trong hàm setState()\n  // VD: setOn(callback) -> setOn(prevState -> !prevState) hoặc setOn((prevState) => {return !prevState})\n  // Nguyên tắc sử dụng hook useState() là phải khai báo ở đầu functional component, không được khai báo trong vòng lặp, câu điều kiện, hàm,...\n  /* function testUseState(check) {\r\n    const [test, setTest] = useState(false); Không được phép\r\n    if(check) {\r\n      const [test1, setTest1] = useState(false); Không được phép\r\n    }\r\n    while(check) {\r\n      const [test1, setTest1] = useState(false); Không được phép\r\n      }\r\n  }\r\n  */\n  console.log(on);\n  const handleToggle = () => {\n    return setOn(on => {\n      return !on;\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `toggle ${on ? \"active\" : \"\"}`,\n      onClick: handleToggle,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `spinner ${on ? \"active\" : \"\"}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n_s(Toggle, \"51TaKkM8rIUQx5G7B1sTTNZENJQ=\");\n_c = Toggle;\nexport default Toggle;\nvar _c;\n$RefreshReg$(_c, \"Toggle\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Toggle","_s","array","console","log","a","b","on","setOn","handleToggle","children","className","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/React/my-app/src/toggle/Toggle.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./ToggleStyles.css\";\r\n\r\n// State là các thông tin lưu trong một component\r\n// Hook là một tính năng mới trong react cho phép chúng ta sử dụng state và các tính năng khác của react mà không cần phải sử dụng class\r\n// Stateless functional component: là component nhưng không sử dụng state\r\n// function Toggle() {\r\n//   return <div className=\"toggle\"></div>;\r\n// }\r\n// Statefull function component: là component có sử dụng state\r\n// function Toggle1() {\r\n// const [count, setCount] = useState();\r\n//   return <div className=\"toggle\"></div>;\r\n// }\r\nfunction Toggle() {\r\n  // useState nhận vào 1 mảng gồm có 2 tham số: Giá trị khởi tạo và hàm cập nhật giá trị khởi tạo đó\r\n  // VD: const [on, setOn] = useState(false); => false là giá trị khởi tạo được gán cho on\r\n  // Để sử dụng useState, ta cần thực hiện 4 bước\r\n  // Enabling state: useState(initialize value)\r\n  // Initialize value: useState(boolean(true, flase), number(1,2,3,...), string(\"Tanas\"), undefined, null,[1,2,3,4,5],\r\n  // {title: Frontend Developer})\r\n  // Reading state:\r\n  // Update state:\r\n\r\n  const array = useState(false);\r\n  console.log(array); // [false, function]\r\n  console.log(array[0]);\r\n  console.log(array[1]);\r\n  const [a, b] = [0, 1];\r\n  console.log(a, b);\r\n\r\n  const [on, setOn] = useState(false);\r\n  //  console.log(on, setOn)\r\n  // re-render khi useState() thay đổi (state changes), tức là hàm set giá trị trong useState() được gán giá trị mới thì toàn bộ component sẽ load lại\r\n  // Dùng hàm setState thì phải đặt trong hàm khác và để hàm khác return về setState(value). Nếu dùng setState(value) mà không đặt trong return của\r\n  // hàm khác thì sẽ bị infinitive loop vì web sẽ re-render liên tục không dừng.\r\n  // Khi muốn thay đổi state mà state này phụ thuộc vào giá trị trước đó của nó thì ta cần truyền vào một callback trong hàm setState()\r\n  // VD: setOn(callback) -> setOn(prevState -> !prevState) hoặc setOn((prevState) => {return !prevState})\r\n  // Nguyên tắc sử dụng hook useState() là phải khai báo ở đầu functional component, không được khai báo trong vòng lặp, câu điều kiện, hàm,...\r\n  /* function testUseState(check) {\r\n    const [test, setTest] = useState(false); Không được phép\r\n    if(check) {\r\n      const [test1, setTest1] = useState(false); Không được phép\r\n    }\r\n    while(check) {\r\n      const [test1, setTest1] = useState(false); Không được phép\r\n\r\n    }\r\n  }\r\n  */\r\n  console.log(on);\r\n  const handleToggle = () => {\r\n    return setOn((on) => {\r\n      return !on;\r\n    });\r\n  };\r\n  return (\r\n    <div>\r\n      <div className={`toggle ${on ? \"active\" : \"\"}`} onClick={handleToggle}>\r\n        <div className={`spinner ${on ? \"active\" : \"\"}`}></div>\r\n      </div>\r\n      {/* <div className=\"toggle-control\">\r\n        <div className=\"toggle-on\" onClick={() => setOn(true)}>\r\n          On\r\n        </div>\r\n        <div className=\"toggle-off\" onClick={() => setOn(false)}>\r\n          Off\r\n        </div>\r\n      </div> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Toggle;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,oBAAoB;;AAE3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,SAASC,MAAMA,CAAA,EAAG;EAAAC,EAAA;EAChB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,MAAMC,KAAK,GAAGL,QAAQ,CAAC,KAAK,CAAC;EAC7BM,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC,CAAC,CAAC;EACpBC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC,CAAC,CAAC,CAAC;EACrBC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC,CAAC,CAAC,CAAC;EACrB,MAAM,CAACG,CAAC,EAAEC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;EACrBH,OAAO,CAACC,GAAG,CAACC,CAAC,EAAEC,CAAC,CAAC;EAEjB,MAAM,CAACC,EAAE,EAAEC,KAAK,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EACnC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEEM,OAAO,CAACC,GAAG,CAACG,EAAE,CAAC;EACf,MAAME,YAAY,GAAGA,CAAA,KAAM;IACzB,OAAOD,KAAK,CAAED,EAAE,IAAK;MACnB,OAAO,CAACA,EAAE;IACZ,CAAC,CAAC;EACJ,CAAC;EACD,oBACER,OAAA;IAAAW,QAAA,eACEX,OAAA;MAAKY,SAAS,EAAG,UAASJ,EAAE,GAAG,QAAQ,GAAG,EAAG,EAAE;MAACK,OAAO,EAAEH,YAAa;MAAAC,QAAA,eACpEX,OAAA;QAAKY,SAAS,EAAG,WAAUJ,EAAE,GAAG,QAAQ,GAAG,EAAG;MAAE;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpD;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OASH,CAAC;AAEV;AAACf,EAAA,CAzDQD,MAAM;AAAAiB,EAAA,GAANjB,MAAM;AA2Df,eAAeA,MAAM;AAAC,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}